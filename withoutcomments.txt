 








 

  
  

declare module function1;
declare module function2;
declare module function4;
declare module switch_int_default;


<<module switch_var_demo1>>
takes input [x: integer, y: real, z:boolean];
returns [u: integer];
start

	declare m,n,k: integer;
	declare h:boolean;
	declare p: real;
	get_value(n);
	switch(k)
	start
		case 10: declare A:real;
			 declare Q: integer;
			 declare B: array[10..30] of integer;
			 declare E: array[4..10] of integer;
			 B[12]:= k*20; 	                  	
			 break;
		case 20: A:= 12.90 + p;       
			 get_value(Q);
			 for(m in 10..15)
			 start
				n:= n+m;
			 end
			 E[7]:= k+12 - Q*10;       
			 break;
		case true: m:=m-n;			  
			 break;
		default: E[9]:= B[15]+Q;	       
			 break;			 	
	end

	u:= u+ x*m-n;
	use module switch_int_default with parameters n;
	switch(p)				  
	start
		case 1: p:=p+1;
			break;
		default:h:=false;
			break;
	end

	switch(h)
	start
		case false: declare A:real;
			 declare Q: integer;
			 declare B: array[10..30] of integer;
			 declare E: array[4..10] of integer;
			 B[12]:= k*20; 	                  	
			 break;
		case 20: A:= 12.90 + p;         
			 get_value(Q);
			 for(m in 10..15)
			 start
				n:= n+m;
			 end
			 E[7]:= k+12 - Q*10;       
			 break;
		case true: m:=m-n;
			 print(m);			
			 break;
		default: E[9]:= B[15]+Q;	         
			 break;			 	
	end
	
end

<<module for_loop_demo>>
takes input [x: integer, y: real, z:boolean];
returns [u: integer];
start

	declare k: integer;
	for(k in 12..70)
	start
		u:= x+k;
		k:= k+2;                               
	end 
end

<<module var_demo_array>>
takes input [x:integer, m:array [2..20] of integer, p:real];
returns [ n:integer, k: boolean];
start
	declare a,b,h:integer;	
	get_value(b);
	declare b4: array[100..150] of boolean;
	declare p: array[2..20] of integer;	
	a:= m[5]+3;				     
	use module function2 with parameters a,b;    
	p:= m;					     
	k:=true;	
	p:= m + p;                                   
	declare v1, v2:real;	
	p[10]:= a*b-20*h;                            
	declare b7: array[35..50] of real;			 
	while(k AND x<=m[11] OR false)
	start
		declare p, u:integer;
		declare b: array[2..20] of integer;
		declare b5, b6: array[35..50] of real;
		b:= m;
		[v1, u, k, p]:=use module function1 with parameters b4, v2, p, b5, u;	  			
		b[2]:= u+m[25];			      
		p:= b[18]*18.56E+2;		     
		declare v3:integer;
		[v1, u, k, v3]:=use module function1 with parameters b4, v2, p, v3, u;	  			
	end
        a:= a - p*b;				     
	b:= b+3;
	k:= a>b OR b>100;
	[v1, a, k, h]:=use module function1 with parameters b7, v2, p, b7, b;	  			
	print(k);	
end						   

<<module function2>>
takes input [ x:integer, y:integer];
start
	declare temp: integer;
	use module function2 with parameters x,y;         
	temp:= x+y;
end


<<module f1>>
takes input[a: array[10..30] of integer, b:array[10..30] of integer, c:real];
returns [m:boolean, n:integer];
start
	declare x,y, p: real;
	declare k, y1: integer;
	declare E: array[2..20] of integer;
	declare Var3, var4: array[100..150] of boolean;
	get_value(y);
	get_value(x);
	declare A,B: array[4..10] of integer;
	declare Var1, Var2: array[35..50] of real;
	get_value(B);
	use module function2 with parameters k, y1;    
	declare D,C: array[10..30] of integer;
	A:=B;
	[ y1, m]:=use module var_demo_array with parameters k,E,x;	   					 
	C:=a;
	[x, y1, m, k]:=use module function1 with parameters Var3, c, k, Var2, k;	  			
	D:=C;	

 
	[ k, m]:=use module var_demo_array with parameters k,B,p;         						 
	for (k in 15..40)
	start
		x:=x+k*y;				      
		declare u, v:real;
		declare int1: integer;
		u := y+c*34.2;
		v:= u-c*p-20.5E+2;
		[x, int1, m, k]:=use module function1 with parameters Var3, c, k, Var4, k;   		
		switch(k)
		start
			case 10: declare A:real;
				 declare Q: integer;
				 declare B: array[10..30] of integer;
				 declare E: array[4..10] of integer;
				 B[9]:= k*20; 	                         	
				 B:=C;           	        
				 E:= Q;                         	 
				 break;
			case 20: A:= 12.90 + u*y - c; 
				 [A, Q, u, y1]:=use module function1 with parameters Var3, c, k, Var1, int1;         
				 get_value(Q);
				 E[7]:= k+12 - Q*10+u;              
				 break;
			default: E[9]:= B[15]+Q;	        	
				 [A, Q]:=use module function1 with parameters Var3, c, k, Var1, int1;          
				 break;			 	
		end
		x:=x + u*v- u<=v;                               
	end
	x:=c+y;	
	[p]:= use module function3 with parameters x,y;         
	C[18]:= a[18]+ b[18];
	A[5]:= B[6]- 10;
	m:= A[5]< C[18] + A[11];			         
	y1:= 20*8-5;	
end							        



<<module function3>>
takes input [a: real, b:real];
returns [c:real];
start
	c:= a+b;
end

<<module function4>>			      
takes input [a: boolean, b:boolean];
returns [c:boolean];
start
	c:= a AND b;
end

<<module function3>>			      
takes input [a: real, b:boolean, e:integer];
returns [c:boolean, d: integer];
start
	d:= 5*43+e;
	c:= a<15.50 AND b;	
end

<<<driver program>>>
start
	declare v_1_2_3, A:integer;
	declare u1, u2, k:boolean;
        A:=12;
	declare p: real;
	[k]:= use module function4 with parameters u1, u2;     
	p:= 23.56;
	get_value(v_1_2_3);							 		
	declare B, C: array [2..20] of integer;
	[ v_1_2_3, u1]:=use module var_demo_array with parameters A,B,p;		
	[ v_1_2_3, k]:=use module var_demo_array with parameters A,B,p;	
	declare a,b:integer;
	a:= 5.89e-2;			          
	get_value(b);
	declare value, q, r: real;
	get_value(q);
	r:= 23.67e+2;
	value:= p+q*r-a*value; 			  
	k:= true AND false OR q;		  
	u1:= a<=b;
	declare w: integer;			 
	w:= 23+B[6];                                  
	b:= a*25+100*C[1];		           
	declare D: array[20..40] of integer;			 
	D:= value-q+r;				  
	w:= w + 5;		 
	B:= C;
	C:= D;				                  
end

<<module function1>>
takes input [data: array[100..150] of boolean, weight: real, length: integer, b:array[35..50] of real, q:integer];
returns [R1: real, R2: integer, R3: boolean, R4: integer];
start
	declare e,f: integer;
	declare g,h: array[100..150] of boolean;
	get_value(g);
	h:=data;
	h[120]:= g[120] OR length<=q AND h[140];
	declare a: real;
	declare p1: boolean;
	R2:= q+1;
	get_value(a);
	[R1, e, p1, f]:=use module function1 with parameters g, a, e, b, f;	  			
	R1:= a+weight/20.50;
	R4:=f + 100;
end								  

<<module function1>>			    	  
takes input [b:boolean, e:integer];
returns [c:boolean, d: integer];
start
	d:= e+15;
	c:= true AND b;	
end

<<module switch_int_default>>
takes input [x:integer];
start
	declare a, b: integer;
	declare c: real;
	declare d: boolean;
	x:= a+b;
	[a]:=use module for_loop_demo with parameters b, c, d;
	switch(a)
	start
		case 1: a:=a+b;
			break;
		case 2: a:=a-b;
			break;
		case 3: a:= a*b;
			break;
		case 4: a:= a/b;
			break;
	end					  
end
